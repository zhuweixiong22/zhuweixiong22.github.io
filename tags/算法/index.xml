<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on A Hugo website</title>
    <link>http://zhuweixiong22.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Dec 2021 17:16:17 +0000</lastBuildDate><atom:link href="http://zhuweixiong22.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KMP 算法</title>
      <link>http://zhuweixiong22.github.io/2021/12/04/kmp-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 04 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/04/kmp-%E7%AE%97%E6%B3%95/</guid>
      <description>基本概念：   非平凡前缀：包含首位字符但不包含末位字符的子串组合。
  非平凡后缀：包含末位字符但不包含首位字符的子串组合。
  next数组定义(又称部分匹配表)：模式串T j指针的变化(即当主串与模式串的某一位字符不匹配时，模式串要回退的位置)
  next[j]的值：当前字符j之前(j-1位)的串的前后缀的相似度(重合字符数+1)
  模式串求next数组 此教程面向的对象：
 了解KMP算法原理，可以手写next数组 看过求next数组的代码，进行过相关思考  next[j]数组函数定义：
看懂求next数组代码最重要的是理解下面两句话：
 next[j+1]的最大值为next[j]+1 如果$P_{k1}\neq P_{j}$ ,那么next[j+1]可能的最大值为next[next[j]]+1,以此类推即可高效求出next[j+1]。(重点)  ​	第一句话的意思是，我们已知next[j]的情况下，继续与下一位字符匹配，最理想的情况就是下一位字符匹配依然相等$P_{k1}$= $P_{j}$，next[j+1]=next[j]+1,相似度+1
​	第二句话的意思是，我们已知**next[j]的情况下，继续与下一位字符匹配,匹配不相等（next[j]只是当前字符j之前的串的前后缀的相似度,然而决定回溯跨度**的是整个S串的前后缀的相似度），进行回溯，继续下一次匹配
流程： ①求next[j+1],则已知next[1]、next[2]$\cdots$next[j]
②假设next[j]=$k_1$,则有$P_1\cdots P_{k-1}$ = $P_{j-k+1}\cdots P_{j-1}$(前k1-1位字符与后k1-1位字符重合)
③如果$P_{k1}$= $P_{j}$,则$P_1\cdots P_{k-1}P_{k1}$ = $P_{j-k+1}\cdots P_{j-1}P_{j}$,则next[j+1]=k1+1,否则进入下一步
④假设next[k1]=k2,则有$P_1\cdots P_{k2-1}$ = $P_{k1-k2+1}\cdots P_{k1-1}$
⑤第二第三步联合得到：$P_1\cdots P_{k2-1}$ = $P_{k1-k2+1}\cdots P_{k1-1}$ = $P_{j-k1+1}\cdots P_{k2-k1+j-1}$ = $P_{j-k2+1}\cdots P_{j-1}$ 即四段 重合
⑥这时候，再判断如果$P_{k2}$ = $P_{j}$, 则$P_1\cdots P_{k2-1}P_{k2}$ = $P_{j-k2+1}\cdots P_{j-1}P_{j}$ ,则next[j+1]=k2+1;否则 再取next[k2]=k3…以此类推</description>
    </item>
    
    <item>
      <title>LeetCode142.环形链表II</title>
      <link>http://zhuweixiong22.github.io/1/01/01/leetcode142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/leetcode142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8ii/</guid>
      <description>142. 环形链表 II 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。
不允许修改 链表。
示例 1：
输入：head = [3,2,0,-4], pos = 1输出：返回索引为 1 的链表节点解释：链表中有一个环，其尾部连接到第二个节点。 示例 2：
输入：head = [1,2], pos = 0输出：返回索引为 0 的链表节点解释：链表中有一个环，其尾部连接到第一个节点。 示例 3：
输入：head = [1], pos = -1输出：返回 null解释：链表中没有环。 提示：
 链表中节点的数目范围在范围 [0, 104] 内 -105 &amp;lt;= Node.val &amp;lt;= 105 pos 的值为 -1 或者链表中的一个有效索引  **进阶：**你是否可以使用 O(1) 空间解决此题？</description>
    </item>
    
    <item>
      <title>LeetCode148.排序链表</title>
      <link>http://zhuweixiong22.github.io/1/01/01/leetcode148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/leetcode148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>148. 排序链表 给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。
示例 1：
输入：head = [4,2,1,3]输出：[1,2,3,4] 示例 2：
输入：head = [-1,5,3,4,0]输出：[-1,0,3,4,5] 示例 3：
输入：head = []输出：[] 提示：
 链表中节点的数目在范围 [0, 5 * 10 ^ 4] 内 -105 &amp;lt;= Node.val &amp;lt;= 105  **进阶：**你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？
题解 时间复杂度要求 O(n log n) 的话，只能是快速排序、归并排序和堆排序，而且要求时间复杂度要求 O(1)
 数组的堆排空间复杂度是可以达到O(1)的
 只能是快排和归并，并且是迭代法(自底向上)，因为递归的话也会占用O(log N)的系统栈空间
这里选用递归的归并排序，迭代版的下次再补坑
链表可以通过修改引用来更改节点顺序，merge过程无需像数组一样开辟额外空间；
大体过程和数组归并差不多
1、找中点分割
 和数组的区别：链表找中点用到了快慢指针，当快指针停下时，慢指针指向中点位置，并且快指针初始指向的是head.next，简化了边界处理。
 2、归并过程
 和数组的区别：不需要开辟新的空间，只需要两个新指针，一个保存结果的head，一个做为归并时的临时指针。当归并过程，一边链表挂载完毕时，另一边不需要像数组那样通过while循环把剩下的依次复制，只需要挂上剩下结点的引用。</description>
    </item>
    
    <item>
      <title>LeetCode160.相交链表</title>
      <link>http://zhuweixiong22.github.io/1/01/01/leetcode160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/leetcode160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>160. 相交链表 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。
图示两个链表在节点 c1 开始相交**：**
题目数据 保证 整个链式结构中不存在环。
注意，函数返回结果后，链表必须 保持其原始结构 。
题解 注意：题目说的相交是指引用值相等，而不是val值相等
使用哈希表肯定是能解的，但是空间复杂度不够好。所以不用哈希表，下面两个双指针解法的本质都是通过消除长度差，以同等的路程，两个指针同时开始遍历，两个链表如果相交，两个指针必然会相遇（相遇两指针相等）且不为null，为null说明不相交。
双指针通俗易懂解法 public ListNode getIntersectionNode(ListNode headA, ListNode headB) {  // 这里判空可以不写  if (headA == null || headB == null) {  return null;  }  int lenA = 0;  int lenB = 0;  ListNode curA = headA;  ListNode curB = headB;  while (curA !</description>
    </item>
    
  </channel>
</rss>
