<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Hugo website</title>
    <link>http://zhuweixiong22.github.io/post/</link>
    <description>Recent content in Posts on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Mar 2022 12:15:50 +0800</lastBuildDate><atom:link href="http://zhuweixiong22.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My 2 Post</title>
      <link>http://zhuweixiong22.github.io/2022/03/07/my-2-post/</link>
      <pubDate>Mon, 07 Mar 2022 12:15:50 +0800</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2022/03/07/my-2-post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</title>
      <link>http://zhuweixiong22.github.io/2021/12/31/string-stringbuffer-%E5%92%8C-stringbuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-string-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84/</link>
      <pubDate>Fri, 31 Dec 2021 11:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/31/string-stringbuffer-%E5%92%8C-stringbuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-string-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84/</guid>
      <description>可变性
简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，所以String 对象是不可变的。
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {  private final char value[]; 	//... }  🐛 修正 ： 我们知道被 final 关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象。因此，final 关键字修饰的数组保存字符串并不是 String 不可变的根本原因，因为这个数组保存的字符串是可变的（final 修饰引用类型变量的情况）。
String 真正不可变有下面几点原因：
 保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。 String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。  相关阅读：如何理解 String 类型值的不可变？ - 知乎提问 (opens new window)
补充（来自issue 675 (opens new window)）：在 Java 9 之后，String 、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串 private final byte[] value</description>
    </item>
    
    <item>
      <title>引用拷贝 浅拷贝 和 深拷贝</title>
      <link>http://zhuweixiong22.github.io/2021/12/30/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-%E5%92%8C-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Thu, 30 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/30/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-%E5%92%8C-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
      <description>**引用拷贝：**引用拷贝，就是拷贝引用地址。两个不同的引用指向同一个对象。
  浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点）
  如果属性是基本类型(int,double,long,boolean等)，拷贝的就是基本类型的值
  如果属性是引用类型，拷贝的就是内存地址（即复制引用但不复制引用的对象）
 注：String类型通过常量赋值时相当于基本数据类型，由于String为不可变对象，是无法修改原String的状态的，其会生成一个新的String对象
     深拷贝 ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。
  图示：
案例：
实现浅拷贝
 在需要拷贝的类上实现 Cloneable 接口，并重写 clone() 方法。实现很简单，直接调用的是父类 Object 的 clone() 方法。 使用的时候调用实现类的clone方法  public class Address implements Cloneable{  private final String name;  // 省略构造函数、Getter&amp;amp;Setter方法  @Override  public Address clone() {  try {  return (Address) super.clone();  } catch (CloneNotSupportedException e) {  throw new AssertionError();  }  } }  public class Person implements Cloneable {  private Address address;  // 省略构造函数、Getter&amp;amp;Setter方法  @Override  public Person clone() {  try {  Person person = (Person) super.</description>
    </item>
    
    <item>
      <title>Java 对象序列化/反序列化</title>
      <link>http://zhuweixiong22.github.io/2021/12/24/java-%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Fri, 24 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/24/java-%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>概述 ObjectOutputStream类  构造方法 序列化操作   ObjectInputStream类  构造方法 反序列化操作1 反序列化操作2   案例：序列化集合  案例分析 案例实现    概述 Java 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。
反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。
简单来说：
 序列化： 将数据结构或对象转换成二进制字节流的过程 反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程  对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。
维基百科：
 序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。
 综上：序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。
ObjectOutputStream类 java.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。
构造方法  public ObjectOutputStream(OutputStream out)： 创建一个指定OutputStream的ObjectOutputStream。  构造举例，代码如下：
FileOutputStream fileOut = new FileOutputStream(&amp;#34;employee.txt&amp;#34;); ObjectOutputStream out = new ObjectOutputStream(fileOut); 序列化操作  一个对象要想序列化，必须满足两个条件:    该类必须实现java.</description>
    </item>
    
    <item>
      <title>思维</title>
      <link>http://zhuweixiong22.github.io/2021/12/05/%E6%80%9D%E7%BB%B4/</link>
      <pubDate>Sun, 05 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/05/%E6%80%9D%E7%BB%B4/</guid>
      <description>对数器
二分查找  在一个有序数组中，找到某个数是否存在 在一个有序(升序)数组中，找 &amp;gt;= 某个数最左侧的位置 在一个有序(升序)数组中，找 &amp;lt;= 某个数最右侧的位置 局部最小值问题  局部最小值问题 二分不一定要有序：数据状况特殊，问题特殊，只要能找出数据的排他性，有一半数据肯定有，另一半数据不确定，那就可以砍一半用二分。
给出一个无序且相邻两个数不相等的数组，找出一个局部最小数（找谷底）
给出局部最小定义：
[0]位置时，只要[0] &amp;lt; [1]，那么[0]就是局部最小
[N - 1]位置时，只要[N - 2] &amp;gt; [N - 1]，那么[N - 1]就是局部最小
[i]位置(不在0和N - 1)，需要[i - 1] &amp;gt; [i] &amp;lt; [i + 1]
先特判两个边界，若找到了其中一个就返回
若找不到，则说明左边界单调递减，右边界单调递增，所以1 ~ N - 2 间一定会有最小值
二分找中间，如果此时找到了直接返回
若找不到，则有三种情况单调递增、单调递减和i为局部最大，无论哪种情况都至少存在一个区域可以继续二分找出局部最小值。
位运算 异或定义：无进位相加
性质
 0 ^ N == N N ^ N == 0 满足结合律和交换律，所以同一批数异或，无论是什么顺序，结果唯一  1、如何不用额外空间交换两个数 a = a ^ b; b = a ^ b; //证明：b = a ^ b ==&amp;gt; (a ^ b) ^ b ==&amp;gt; a ^ (b ^ b) ==&amp;gt; a ^ 0 ==&amp;gt; a a = a ^ b; //证明：a = a ^ b ==&amp;gt; (a ^ b) ^ a ==&amp;gt; (a ^ a) ^ b ==&amp;gt; 0 ^ b ==&amp;gt; b 注意前提是：a和b在内存中的位置不相等(即a和b有各自独立的内存区域,a和b的值可以一眼)，如果a和b指向同一块内存，执行三行代码后会变成0</description>
    </item>
    
    <item>
      <title>思维导图</title>
      <link>http://zhuweixiong22.github.io/2021/12/05/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</link>
      <pubDate>Sun, 05 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/05/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</guid>
      <description>Java   Java I/O: https://www.processon.com/view/6128e2fc079129550eeaaff1?fromnew=1
  Java 8/反射: https://www.processon.com/view/612f95677d9c081c75321834?fromnew=1
  Web基础   MySQL: https://www.processon.com/view/613227d9f346fb07155d14fa?fromnew=1
  Redis基础: https://www.processon.com/view/614b3fb6e0b34d2b8d398484?fromnew=1
  Java Web大纲: https://www.processon.com/view/61532d271efad4243d3efa2f?fromnew=1
  Servlet: https://www.processon.com/view/61446da50e3e746b35a1b1b2?fromnew=1
  Filter/Listener: https://www.processon.com/view/614deabaf346fb12580aac40?fromnew=1
  JSP: https://www.processon.com/view/614b4002f346fb69b1678bfe?fromnew=1
  前端基础: https://www.processon.com/view/6121fe230e3e743b32794564?fromnew=1
  框架   Spring/Spring MVC: https://www.processon.com/view/615e6b4a5653bb45b2c2a7e9?fromnew=1
  Mybatis: https://www.processon.com/view/6157d59a0791295710b3b4c9?fromnew=1
  SpringSecurity: https://www.processon.com/view/618fddd5f346fb6e389dfad0?fromnew=1
  SpringBoot: https://www.processon.com/view/616ea2c85653bb2aeb397b3f?fromnew=1
  Git: https://www.processon.com/view/6177c8cd5653bb7318d66ab5?fromnew=1
  数据结构  数据结构基础: https://www.</description>
    </item>
    
    <item>
      <title>KMP 算法</title>
      <link>http://zhuweixiong22.github.io/2021/12/04/kmp-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 04 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/04/kmp-%E7%AE%97%E6%B3%95/</guid>
      <description>基本概念：   非平凡前缀：包含首位字符但不包含末位字符的子串组合。
  非平凡后缀：包含末位字符但不包含首位字符的子串组合。
  next数组定义(又称部分匹配表)：模式串T j指针的变化(即当主串与模式串的某一位字符不匹配时，模式串要回退的位置)
  next[j]的值：当前字符j之前(j-1位)的串的前后缀的相似度(重合字符数+1)
  模式串求next数组 此教程面向的对象：
 了解KMP算法原理，可以手写next数组 看过求next数组的代码，进行过相关思考  next[j]数组函数定义：
看懂求next数组代码最重要的是理解下面两句话：
 next[j+1]的最大值为next[j]+1 如果$P_{k1}\neq P_{j}$ ,那么next[j+1]可能的最大值为next[next[j]]+1,以此类推即可高效求出next[j+1]。(重点)  ​	第一句话的意思是，我们已知next[j]的情况下，继续与下一位字符匹配，最理想的情况就是下一位字符匹配依然相等$P_{k1}$= $P_{j}$，next[j+1]=next[j]+1,相似度+1
​	第二句话的意思是，我们已知**next[j]的情况下，继续与下一位字符匹配,匹配不相等（next[j]只是当前字符j之前的串的前后缀的相似度,然而决定回溯跨度**的是整个S串的前后缀的相似度），进行回溯，继续下一次匹配
流程： ①求next[j+1],则已知next[1]、next[2]$\cdots$next[j]
②假设next[j]=$k_1$,则有$P_1\cdots P_{k-1}$ = $P_{j-k+1}\cdots P_{j-1}$(前k1-1位字符与后k1-1位字符重合)
③如果$P_{k1}$= $P_{j}$,则$P_1\cdots P_{k-1}P_{k1}$ = $P_{j-k+1}\cdots P_{j-1}P_{j}$,则next[j+1]=k1+1,否则进入下一步
④假设next[k1]=k2,则有$P_1\cdots P_{k2-1}$ = $P_{k1-k2+1}\cdots P_{k1-1}$
⑤第二第三步联合得到：$P_1\cdots P_{k2-1}$ = $P_{k1-k2+1}\cdots P_{k1-1}$ = $P_{j-k1+1}\cdots P_{k2-k1+j-1}$ = $P_{j-k2+1}\cdots P_{j-1}$ 即四段 重合
⑥这时候，再判断如果$P_{k2}$ = $P_{j}$, 则$P_1\cdots P_{k2-1}P_{k2}$ = $P_{j-k2+1}\cdots P_{j-1}P_{j}$ ,则next[j+1]=k2+1;否则 再取next[k2]=k3…以此类推</description>
    </item>
    
    <item>
      <title>JavaSE 笔记</title>
      <link>http://zhuweixiong22.github.io/2021/12/03/javase-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 03 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/03/javase-%E7%AC%94%E8%AE%B0/</guid>
      <description>基本数据类型 1.小数默认的数据类型为double类型 2.数据类型转换 boolean不能发生数据类型转换
float范围大于long，但是字节数比long小
赋值时，级别低赋值给级别高的即数据范围从小到大（与它的字节数无关）的会进行自动类型转换（隐式），不报错
long num1 = 100; // int--&amp;gt;long long num2 = 100L; float num3 = 12.3;// double--&amp;gt;float 从大到小，会报错 //第一条右边默认为整型变量，范围小于long类型会自动类型转换 对于byte、short、char三种类型的赋值 如果右侧的数值没有超过它们自身的范围，编译器会自动进行强制类型转换
注意：该数值一定要全是常量而不能有变量
int num1 = 4； int num2 = 5； byte a = 4；//正确 编译器自动补全 byte a = (byte)4; byte b = num1;//编译器会报错 byte c = 4 + 5；正确 编译器的常量优化：
当一个表达式有若干个常量时，编译器会在编译时直接进行常量计算，而不是在执行的时候才计算
即编译后生成的字节码文件中就是byte c = 9 ；
3.8种基本数据类型    基本类型 大小 取值范围 装箱基本类型     int 4个字节 -2^31 ~ 2^31-1 Integer   char 2个字节  Character   byte 1个字节 -2^7 ~ 2^7-1 Byte   short 2个字节 -2^15 ~ 2^15-1 Short   long 8个字节 -2^63 ~ 2^63-1 Long   float 4个字节  Float   double 8个字节  Double   boolean 1或者4个字节 true ~ false Boolean    4.</description>
    </item>
    
    <item>
      <title>The actor is a gander</title>
      <link>http://zhuweixiong22.github.io/2018/02/09/the-actor-is-a-gander/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2018/02/09/the-actor-is-a-gander/</guid>
      <description>However, a frostless stop is a stream of the mind. The actor is a gander. A garni person without gorillas is truly a vest of scentless plots.
Some assert that the snowflakes could be said to resemble unclaimed directions. The sponge is a boat. Authors often misinterpret the inventory as an absurd sock, when in actuality it feels more like a plumbous earth.
The first enarched tune is, in its own way, a visitor.</description>
    </item>
    
    <item>
      <title>The beach is a push</title>
      <link>http://zhuweixiong22.github.io/2018/02/09/the-beach-is-a-push/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2018/02/09/the-beach-is-a-push/</guid>
      <description>Gainly stops show us how mother-in-laws can be drizzles. Some assert that the fahrenheit is a mascara. The crosswise idea reveals itself as a baddish ink to those who look. A grasping interest without kitties is truly a crocus of hopeful nets. The developments could be said to resemble farfetched triangles. A mind of the fender is assumed to be a cornute radiator.
In ancient times a whapping napkin&amp;#39;s alcohol comes with it the thought that the weldless industry is a quill.</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>http://zhuweixiong22.github.io/2016/12/30/a-plain-markdown-post/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2016/12/30/a-plain-markdown-post/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.  There are many differences in syntax between Blackfriday&amp;rsquo;s Markdown and Pandoc&amp;rsquo;s Markdown.</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>http://zhuweixiong22.github.io/2015/01/01/lorem-ipsum/</link>
      <pubDate>Thu, 01 Jan 2015 13:09:13 -0600</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2015/01/01/lorem-ipsum/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://zhuweixiong22.github.io/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/</guid>
      <description>回溯时的可变参数问题
到底什么时候传index什么时候传path
其实传index和path的目的都是一样的
出现错误是对Java的参数传递了解不够深
path定义在全局变量
当参数没有传path的时候
private List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); private List&amp;lt;Integer&amp;gt; path = new ArrayList&amp;lt;&amp;gt;();  public void backTracking(int[] nums, int index) {  if (path.size() == nums.length) {  /* 这里拿的是全局变量path的直接引用，一但退出backTracking函数，res装的是直接引用，最后一个path就会被清空，导致答案不正确 */  path = new ArrayList&amp;lt;&amp;gt;(path);  res.add(path);  System.out.println(&amp;#34;backTracking函数中的path&amp;#34; + path);  return;  } 	// 省略无关代码 } 正确代码：
private List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); private List&amp;lt;Integer&amp;gt; path = new ArrayList&amp;lt;&amp;gt;();  public void backTracking(int[] nums, int index) {  if (path.</description>
    </item>
    
    <item>
      <title>LeetCode142.环形链表II</title>
      <link>http://zhuweixiong22.github.io/1/01/01/leetcode142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/leetcode142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8ii/</guid>
      <description>142. 环形链表 II 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。
不允许修改 链表。
示例 1：
输入：head = [3,2,0,-4], pos = 1输出：返回索引为 1 的链表节点解释：链表中有一个环，其尾部连接到第二个节点。 示例 2：
输入：head = [1,2], pos = 0输出：返回索引为 0 的链表节点解释：链表中有一个环，其尾部连接到第一个节点。 示例 3：
输入：head = [1], pos = -1输出：返回 null解释：链表中没有环。 提示：
 链表中节点的数目范围在范围 [0, 104] 内 -105 &amp;lt;= Node.val &amp;lt;= 105 pos 的值为 -1 或者链表中的一个有效索引  **进阶：**你是否可以使用 O(1) 空间解决此题？</description>
    </item>
    
    <item>
      <title>LeetCode148.排序链表</title>
      <link>http://zhuweixiong22.github.io/1/01/01/leetcode148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/leetcode148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>148. 排序链表 给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。
示例 1：
输入：head = [4,2,1,3]输出：[1,2,3,4] 示例 2：
输入：head = [-1,5,3,4,0]输出：[-1,0,3,4,5] 示例 3：
输入：head = []输出：[] 提示：
 链表中节点的数目在范围 [0, 5 * 10 ^ 4] 内 -105 &amp;lt;= Node.val &amp;lt;= 105  **进阶：**你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？
题解 时间复杂度要求 O(n log n) 的话，只能是快速排序、归并排序和堆排序，而且要求时间复杂度要求 O(1)
 数组的堆排空间复杂度是可以达到O(1)的
 只能是快排和归并，并且是迭代法(自底向上)，因为递归的话也会占用O(log N)的系统栈空间
这里选用递归的归并排序，迭代版的下次再补坑
链表可以通过修改引用来更改节点顺序，merge过程无需像数组一样开辟额外空间；
大体过程和数组归并差不多
1、找中点分割
 和数组的区别：链表找中点用到了快慢指针，当快指针停下时，慢指针指向中点位置，并且快指针初始指向的是head.next，简化了边界处理。
 2、归并过程
 和数组的区别：不需要开辟新的空间，只需要两个新指针，一个保存结果的head，一个做为归并时的临时指针。当归并过程，一边链表挂载完毕时，另一边不需要像数组那样通过while循环把剩下的依次复制，只需要挂上剩下结点的引用。</description>
    </item>
    
    <item>
      <title>LeetCode160.相交链表</title>
      <link>http://zhuweixiong22.github.io/1/01/01/leetcode160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/leetcode160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>160. 相交链表 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。
图示两个链表在节点 c1 开始相交**：**
题目数据 保证 整个链式结构中不存在环。
注意，函数返回结果后，链表必须 保持其原始结构 。
题解 注意：题目说的相交是指引用值相等，而不是val值相等
使用哈希表肯定是能解的，但是空间复杂度不够好。所以不用哈希表，下面两个双指针解法的本质都是通过消除长度差，以同等的路程，两个指针同时开始遍历，两个链表如果相交，两个指针必然会相遇（相遇两指针相等）且不为null，为null说明不相交。
双指针通俗易懂解法 public ListNode getIntersectionNode(ListNode headA, ListNode headB) {  // 这里判空可以不写  if (headA == null || headB == null) {  return null;  }  int lenA = 0;  int lenB = 0;  ListNode curA = headA;  ListNode curB = headB;  while (curA !</description>
    </item>
    
    <item>
      <title>Redis 综合</title>
      <link>http://zhuweixiong22.github.io/1/01/01/redis-%E7%BB%BC%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/redis-%E7%BB%BC%E5%90%88/</guid>
      <description>Redis 基础 概念 数据类型 通用命令 Jedis Redis 高级 持久化 持久化简介 RDB （Redis DataBase）
save指令   命令
save   手动指定一次保存操作
  ​	save指令相关配置
  dbfilename dump.rdb
说明：设置本地数据库文件名，默认值为 dump.rdb经验：通常设置为dump-端口号.rdb
  dir
说明：设置存储.rdb文件的路径
经验：pwd命令显示当前目录绝对路径（填写这个路径），通常设置成存储空间较大的目录中，目录名称data
  dbcompression yes
说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩
经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）
  rdbchecksum yes
说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行
经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险
  save指令工作原理
注意：save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用。
bgsave指令   命令
bgsave   作用
手动启动后台保存操作，但不是立即执行，可以若执行成功可在日志文件看到信息
  bgsave指令相关配置
bgsave指令工作原理</description>
    </item>
    
    <item>
      <title>关于 @ResponseBody 的那些事</title>
      <link>http://zhuweixiong22.github.io/1/01/01/%E5%85%B3%E4%BA%8E-responsebody-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/%E5%85%B3%E4%BA%8E-responsebody-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>转载于：https://blog.csdn.net/u014534808/article/details/116859496
开心编码 事情是这样的，我在用SpringBoot框架搭建的项目上写了一个新增用户的接口，接口地址是/v1/user/test，代码如下所示（demo版，非生产代码），简单到不能再简单的一个接口，像这样的接口我都记不清自己已经写了多少个了。
@Controller public class TestRespController { 	//新增用户的接口  @RequestMapping(&amp;#34;/v1/user/test&amp;#34;)  public User addUser(String userName, String password) {  User user = new User();  user.setUserName(userName);  user.setPassword(password);  return user;  } } 接口写好之后，我没有多想，就启动项目开始调试代码，我熟练的在chrome浏览器上输入了http://localhost:8080/v1/user/test这个地址，然后点击回车，没想到的是页面上提示了一个404的错误。
这是怎么回事呢？我这接口地址没有错呀，为啥找不到接口呢？奇了怪了。我火急火燎的跑到控制台，看看有没有错误日志。让我很失望啥错误都没有输出，过滤器也准确的把我的输入的请求地址打印出来了。
苦苦寻找 为啥页面报了404的错误，而控制台没有任何错误输出呢？实在是有点诡异。问同事嘛，又不好意思，自己好歹是个高级开发工程师，404的问题都搞不定实在是说不过去。三十六计走为上，看看其他的正常的接口是怎么写的。然后，我找到了这样一个接口，这个接口是可以正常访问的，
@ResponseBody @RequestMapping(&amp;#34;/v1/user/test/update&amp;#34;) public User updateUser(User user) {  boolean result = testNgService.updateUser(user);  return result ? user : null; } 哦哦哦，我突然恍然大悟，原来是没有在接口上添加@ResponseBody 注解，我印象中这个注解可以将返回的对象序列化成json字符串，并放在响应体中，但是跟接口地址又有啥关系呢？。抱着试试看的态度，我在接口上加上了 @ResponseBody注解，代码就不列举了，太简单了不好意思列举。再次访问http://localhost:8080/v1/user/test 这个地址，接口可以正常返回数据了。
当然，如果该类下所有的接口都是返回application/json格式数据的接口，则可以直接将类上的**@Controller注解替换成 @RestController 注解。@RestController注解是一个组合注解是由@Controller注解和ResponseBody注解组成**。
思考升华 至此，问题是解决了。但是，心中的小问号还萦绕在心头。
 为啥页面报了404的错误，但是控制台没有错误日志呢？ 为啥不加@ResponseBody注解接口会报404的错误呢？  为啥页面报了404的错误，但是控制台没有错误日志呢？ 为啥出现了404的异常，但是控制台没有错误的日志输出呢？这个就很奇怪了。这个问题是我们首先需要解决的，不然不知道具体的错误是啥，就很难定位到问题。根据已经掌握SpringMVC的知识：我们在页面输入一个url之后，请求首先会到DispatcherServlet。然后，DispatcherServlet会根据url去HandelMapping中找到能处理该请求的Handler。如果找不到的话则会报错404的错误，所以，猜测SpringBoot抛出的是NoHandlerFoundException这个异常，现在的问题就是为啥这个NoHandlerFoundException没输出呢？一番百度之后，我发现只需要在配置文件application.</description>
    </item>
    
    <item>
      <title>关于 Redis 事务是否满足原子性</title>
      <link>http://zhuweixiong22.github.io/1/01/01/%E5%85%B3%E4%BA%8E-redis-%E4%BA%8B%E5%8A%A1%E6%98%AF%E5%90%A6%E6%BB%A1%E8%B6%B3%E5%8E%9F%E5%AD%90%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/%E5%85%B3%E4%BA%8E-redis-%E4%BA%8B%E5%8A%A1%E6%98%AF%E5%90%A6%E6%BB%A1%E8%B6%B3%E5%8E%9F%E5%AD%90%E6%80%A7/</guid>
      <description>个人理解这个问题需要分两种情况讨论
 multi开启事务后命令队列语法有错误或取消事务discard multi开启事务后命令队列运行错误  第一种情况 可以看到开启事务后输入一个错误语法命令get name zhangsan后立即显示错误提示了，再执行exec自然也是不行的，所有命令都不会执行。
discard的情况就不用说了，取消事务。
这种情况下是满足事务的原子性的，要不所有命令执行成功，要不一个命令都不执行。
第二种情况 开启事务后命令语法正确，但是在命令执行期间出错，如输入参数的数据类型不符合命令的参数要求。
set name后用了list的指令，可以看到命令执行后，能够正确运行的命令会执行，运行错误的命令不会被执行。这种情况下Redis 事务其实不满足原子性的，也就是Redis 不支持事务回滚机制，运行错误需要手动回滚(应该避免)。
为什么Redis不支持回滚 官方文档说明：</description>
    </item>
    
    <item>
      <title>关于使用 SpringDataRedis 配置序列化方式时报错</title>
      <link>http://zhuweixiong22.github.io/1/01/01/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8-springdataredis-%E9%85%8D%E7%BD%AE%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%E6%97%B6%E6%8A%A5%E9%94%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8-springdataredis-%E9%85%8D%E7%BD%AE%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%E6%97%B6%E6%8A%A5%E9%94%99/</guid>
      <description>SpringBoot下RedisConfig配置
/** * @author novo * @date 2022/1/2-22:13 */ @Configuration public class RedisConfig {  @Bean  public RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate(LettuceConnectionFactory lettuceConnectionFactory){  RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate = new RedisTemplate&amp;lt;&amp;gt;();  //为string类型的key设置序列化  redisTemplate.setKeySerializer(new StringRedisSerializer());  //为string类型的value设置序列化  redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());  //redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer(Object.class));  //为hash设置序列化  redisTemplate.setHashKeySerializer(new StringRedisSerializer());  redisTemplate.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());  // 设置 RedisConnection 工厂。 它就是实现多种 Java Redis 客户端接入的工厂  redisTemplate.setConnectionFactory(lettuceConnectionFactory);  return redisTemplate;  } } 报错信息
org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Cannot construct instance of `com.</description>
    </item>
    
    <item>
      <title>移位运算符 val / 2 != val &gt;&gt; 1 的情况</title>
      <link>http://zhuweixiong22.github.io/1/01/01/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6-val-/-2-val-1-%E7%9A%84%E6%83%85%E5%86%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6-val-/-2-val-1-%E7%9A%84%E6%83%85%E5%86%B5/</guid>
      <description>在写堆排序用移位运算的时候发现执行报了个数组索引越界
打印了下才发现 -1 &amp;raquo; 1 并不等于0而是等于1
 原码 补码 右移一位 结果（原码） -1 = 1000 0001， 1111 1111， 1111 1111 -1 -2 = 1000 0010， 1111 1110， 1111 1111 -1 -3 = 1000 0011， 1111 1101， 1111 1110 -2 -4 = 1000 0100， 1111 1100， 1111 1110 -2 -5 = 1000 0101， 1111 1011， 1111 1101 -3 -6 = 1000 0110， 1111 1010， 1111 1101 -3 对于 val / 2 != val &amp;raquo; 1的原因是：val为负数且为奇数或者正数移位数超过类型最大位数溢出为负。</description>
    </item>
    
  </channel>
</rss>
