<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on A Hugo website</title>
    <link>http://zhuweixiong22.github.io/categories/java/</link>
    <description>Recent content in Java on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Dec 2021 11:16:17 +0000</lastBuildDate><atom:link href="http://zhuweixiong22.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</title>
      <link>http://zhuweixiong22.github.io/2021/12/31/string-stringbuffer-%E5%92%8C-stringbuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-string-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84/</link>
      <pubDate>Fri, 31 Dec 2021 11:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/31/string-stringbuffer-%E5%92%8C-stringbuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-string-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84/</guid>
      <description>可变性
简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，所以String 对象是不可变的。
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {  private final char value[]; 	//... }  🐛 修正 ： 我们知道被 final 关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象。因此，final 关键字修饰的数组保存字符串并不是 String 不可变的根本原因，因为这个数组保存的字符串是可变的（final 修饰引用类型变量的情况）。
String 真正不可变有下面几点原因：
 保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。 String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。  相关阅读：如何理解 String 类型值的不可变？ - 知乎提问 (opens new window)
补充（来自issue 675 (opens new window)）：在 Java 9 之后，String 、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串 private final byte[] value</description>
    </item>
    
    <item>
      <title>引用拷贝 浅拷贝 和 深拷贝</title>
      <link>http://zhuweixiong22.github.io/2021/12/30/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-%E5%92%8C-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Thu, 30 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/30/%E5%BC%95%E7%94%A8%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-%E5%92%8C-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
      <description>**引用拷贝：**引用拷贝，就是拷贝引用地址。两个不同的引用指向同一个对象。
  浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点）
  如果属性是基本类型(int,double,long,boolean等)，拷贝的就是基本类型的值
  如果属性是引用类型，拷贝的就是内存地址（即复制引用但不复制引用的对象）
 注：String类型通过常量赋值时相当于基本数据类型，由于String为不可变对象，是无法修改原String的状态的，其会生成一个新的String对象
     深拷贝 ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。
  图示：
案例：
实现浅拷贝
 在需要拷贝的类上实现 Cloneable 接口，并重写 clone() 方法。实现很简单，直接调用的是父类 Object 的 clone() 方法。 使用的时候调用实现类的clone方法  public class Address implements Cloneable{  private final String name;  // 省略构造函数、Getter&amp;amp;Setter方法  @Override  public Address clone() {  try {  return (Address) super.clone();  } catch (CloneNotSupportedException e) {  throw new AssertionError();  }  } }  public class Person implements Cloneable {  private Address address;  // 省略构造函数、Getter&amp;amp;Setter方法  @Override  public Person clone() {  try {  Person person = (Person) super.</description>
    </item>
    
    <item>
      <title>Java 对象序列化/反序列化</title>
      <link>http://zhuweixiong22.github.io/2021/12/24/java-%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Fri, 24 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/24/java-%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>概述 ObjectOutputStream类  构造方法 序列化操作   ObjectInputStream类  构造方法 反序列化操作1 反序列化操作2   案例：序列化集合  案例分析 案例实现    概述 Java 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。
反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。
简单来说：
 序列化： 将数据结构或对象转换成二进制字节流的过程 反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程  对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。
维基百科：
 序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。
 综上：序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。
ObjectOutputStream类 java.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。
构造方法  public ObjectOutputStream(OutputStream out)： 创建一个指定OutputStream的ObjectOutputStream。  构造举例，代码如下：
FileOutputStream fileOut = new FileOutputStream(&amp;#34;employee.txt&amp;#34;); ObjectOutputStream out = new ObjectOutputStream(fileOut); 序列化操作  一个对象要想序列化，必须满足两个条件:    该类必须实现java.</description>
    </item>
    
    <item>
      <title>JavaSE 笔记</title>
      <link>http://zhuweixiong22.github.io/2021/12/03/javase-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 03 Dec 2021 17:16:17 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/2021/12/03/javase-%E7%AC%94%E8%AE%B0/</guid>
      <description>基本数据类型 1.小数默认的数据类型为double类型 2.数据类型转换 boolean不能发生数据类型转换
float范围大于long，但是字节数比long小
赋值时，级别低赋值给级别高的即数据范围从小到大（与它的字节数无关）的会进行自动类型转换（隐式），不报错
long num1 = 100; // int--&amp;gt;long long num2 = 100L; float num3 = 12.3;// double--&amp;gt;float 从大到小，会报错 //第一条右边默认为整型变量，范围小于long类型会自动类型转换 对于byte、short、char三种类型的赋值 如果右侧的数值没有超过它们自身的范围，编译器会自动进行强制类型转换
注意：该数值一定要全是常量而不能有变量
int num1 = 4； int num2 = 5； byte a = 4；//正确 编译器自动补全 byte a = (byte)4; byte b = num1;//编译器会报错 byte c = 4 + 5；正确 编译器的常量优化：
当一个表达式有若干个常量时，编译器会在编译时直接进行常量计算，而不是在执行的时候才计算
即编译后生成的字节码文件中就是byte c = 9 ；
3.8种基本数据类型    基本类型 大小 取值范围 装箱基本类型     int 4个字节 -2^31 ~ 2^31-1 Integer   char 2个字节  Character   byte 1个字节 -2^7 ~ 2^7-1 Byte   short 2个字节 -2^15 ~ 2^15-1 Short   long 8个字节 -2^63 ~ 2^63-1 Long   float 4个字节  Float   double 8个字节  Double   boolean 1或者4个字节 true ~ false Boolean    4.</description>
    </item>
    
    <item>
      <title>移位运算符 val / 2 != val &gt;&gt; 1 的情况</title>
      <link>http://zhuweixiong22.github.io/1/01/01/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6-val-/-2-val-1-%E7%9A%84%E6%83%85%E5%86%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zhuweixiong22.github.io/1/01/01/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6-val-/-2-val-1-%E7%9A%84%E6%83%85%E5%86%B5/</guid>
      <description>在写堆排序用移位运算的时候发现执行报了个数组索引越界
打印了下才发现 -1 &amp;raquo; 1 并不等于0而是等于1
 原码 补码 右移一位 结果（原码） -1 = 1000 0001， 1111 1111， 1111 1111 -1 -2 = 1000 0010， 1111 1110， 1111 1111 -1 -3 = 1000 0011， 1111 1101， 1111 1110 -2 -4 = 1000 0100， 1111 1100， 1111 1110 -2 -5 = 1000 0101， 1111 1011， 1111 1101 -3 -6 = 1000 0110， 1111 1010， 1111 1101 -3 对于 val / 2 != val &amp;raquo; 1的原因是：val为负数且为奇数或者正数移位数超过类型最大位数溢出为负。</description>
    </item>
    
  </channel>
</rss>
